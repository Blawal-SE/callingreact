{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Downloads\\\\reactjsnodeconnectd\\\\group-video-final-master\\\\client\\\\src\\\\routes\\\\Room.js\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport \"./room.css\";\n\nconst Video = props => {\n  const ref = useRef();\n  useEffect(() => {\n    props.peer.on(\"stream\", stream => {\n      ref.current.srcObject = stream;\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"video\", {\n    className: \"mini-video\",\n    playsInline: true,\n    autoPlay: true,\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 10\n    }\n  });\n};\n\nconst Room = props => {\n  const [peers, setPeers] = useState([]);\n  const socketRef = useRef();\n  const userVideo = useRef();\n  const peersRef = useRef([]);\n  const roomID = props.match.params.roomID;\n  console.log(typeof roomID);\n  useEffect(() => {\n    socketRef.current = io(\"https://videogroup.herokuapp.com/\");\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      userVideo.current.srcObject = stream;\n      socketRef.current.emit(\"join room\", roomID);\n      socketRef.current.on(\"all users\", users => {\n        const peers = [];\n        users.forEach(userID => {\n          const peer = createPeer(userID, socketRef.current.id, stream);\n          peersRef.current.push({\n            peerID: userID,\n            peer\n          });\n          peers.push(peer);\n        });\n        setPeers(peers);\n      });\n      socketRef.current.on(\"user joined\", payload => {\n        const peer = addPeer(payload.signal, payload.callerID, stream);\n        peersRef.current.push({\n          peerID: payload.callerID,\n          peer\n        });\n        setPeers(users => [...users, peer]);\n      });\n      socketRef.current.on(\"receiving returned signal\", payload => {\n        const item = peersRef.current.find(p => p.peerID === payload.id);\n        item.peer.signal(payload.signal);\n      });\n    });\n  }, []);\n\n  function createPeer(userToSignal, callerID, stream) {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"sending signal\", {\n        userToSignal,\n        callerID,\n        signal\n      });\n    });\n    return peer;\n  }\n\n  function addPeer(incomingSignal, callerID, stream) {\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"returning signal\", {\n        signal,\n        callerID\n      });\n    });\n    peer.signal(incomingSignal);\n    return peer;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"video-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"video\", {\n    ref: userVideo,\n    autoPlay: true,\n    playsInline: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mini-video-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, peers.map((peer, index) => {\n    return /*#__PURE__*/React.createElement(Video, {\n      key: index,\n      peer: peer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 15\n      }\n    });\n  })));\n};\n\nexport default Room;","map":{"version":3,"sources":["C:/Users/USER/Downloads/reactjsnodeconnectd/group-video-final-master/client/src/routes/Room.js"],"names":["React","useEffect","useRef","useState","io","Peer","Video","props","ref","peer","on","stream","current","srcObject","Room","peers","setPeers","socketRef","userVideo","peersRef","roomID","match","params","console","log","navigator","mediaDevices","getUserMedia","video","audio","then","emit","users","forEach","userID","createPeer","id","push","peerID","payload","addPeer","signal","callerID","item","find","p","userToSignal","initiator","trickle","incomingSignal","map","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport \"./room.css\";\n\n\nconst Video = (props) => {\n  const ref = useRef();\n\n  useEffect(() => {\n    props.peer.on(\"stream\", (stream) => {\n      ref.current.srcObject = stream;\n    });\n  }, []);\n\n  return <video className={\"mini-video\"} playsInline autoPlay ref={ref} />;\n};\n\nconst Room = (props) => {\n  const [peers, setPeers] = useState([]);\n  const socketRef = useRef();\n  const userVideo = useRef();\n  const peersRef = useRef([]);\n  const roomID = props.match.params.roomID;\nconsole.log(typeof roomID);\n  useEffect(() => {\n    socketRef.current = io(\"https://videogroup.herokuapp.com/\");\n    navigator.mediaDevices\n      .getUserMedia({ video: true, audio: true })\n      .then((stream) => {\n        userVideo.current.srcObject = stream;\n        socketRef.current.emit(\"join room\", roomID);\n        socketRef.current.on(\"all users\", (users) => {\n          const peers = [];\n          users.forEach((userID) => {\n            const peer = createPeer(userID, socketRef.current.id, stream);\n            peersRef.current.push({\n              peerID: userID,\n              peer,\n            });\n            peers.push(peer);\n          });\n          setPeers(peers);\n        });\n\n        socketRef.current.on(\"user joined\", (payload) => {\n          const peer = addPeer(payload.signal, payload.callerID, stream);\n          peersRef.current.push({\n            peerID: payload.callerID,\n            peer,\n          });\n\n          setPeers((users) => [...users, peer]);\n        });\n\n        socketRef.current.on(\"receiving returned signal\", (payload) => {\n          const item = peersRef.current.find((p) => p.peerID === payload.id);\n          item.peer.signal(payload.signal);\n        });\n      });\n  }, []);\n\n  function createPeer(userToSignal, callerID, stream) {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream,\n    });\n\n    peer.on(\"signal\", (signal) => {\n      socketRef.current.emit(\"sending signal\", {\n        userToSignal,\n        callerID,\n        signal,\n      });\n    });\n\n    return peer;\n  }\n\n  function addPeer(incomingSignal, callerID, stream) {\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream,\n    });\n\n    peer.on(\"signal\", (signal) => {\n      socketRef.current.emit(\"returning signal\", { signal, callerID });\n    });\n\n    peer.signal(incomingSignal);\n\n    return peer;\n  }\n\n  return (\n    <div>\n      <div className={\"video-container\"}>\n        <video  ref={userVideo} autoPlay playsInline />\n      </div>\n      <div className={\"mini-video-container\"}>\n        {peers.map((peer, index) => {\n          return (\n           \n              <Video key={index} peer={peer} />\n          \n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Room;\n"]},"metadata":{},"sourceType":"module"}